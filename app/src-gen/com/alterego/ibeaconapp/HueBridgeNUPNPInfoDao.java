package com.alterego.ibeaconapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alterego.ibeaconapp.HueBridgeNUPNPInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HUE_BRIDGE_NUPNPINFO.
*/
public class HueBridgeNUPNPInfoDao extends AbstractDao<HueBridgeNUPNPInfo, Void> {

    public static final String TABLENAME = "HUE_BRIDGE_NUPNPINFO";

    /**
     * Properties of entity HueBridgeNUPNPInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Internalipaddress = new Property(2, String.class, "internalipaddress", false, "INTERNALIPADDRESS");
        public final static Property Macaddress = new Property(3, String.class, "macaddress", false, "MACADDRESS");
    };


    public HueBridgeNUPNPInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HueBridgeNUPNPInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HUE_BRIDGE_NUPNPINFO' (" + //
                "'ID' TEXT NOT NULL ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'INTERNALIPADDRESS' TEXT," + // 2: internalipaddress
                "'MACADDRESS' TEXT);"); // 3: macaddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HUE_BRIDGE_NUPNPINFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HueBridgeNUPNPInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String internalipaddress = entity.getInternalipaddress();
        if (internalipaddress != null) {
            stmt.bindString(3, internalipaddress);
        }
 
        String macaddress = entity.getMacaddress();
        if (macaddress != null) {
            stmt.bindString(4, macaddress);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public HueBridgeNUPNPInfo readEntity(Cursor cursor, int offset) {
        HueBridgeNUPNPInfo entity = new HueBridgeNUPNPInfo( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // internalipaddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // macaddress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HueBridgeNUPNPInfo entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInternalipaddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMacaddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(HueBridgeNUPNPInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(HueBridgeNUPNPInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
